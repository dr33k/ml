# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJQDAkDdGqrMoThY2CFaim-DgTiJd8P8

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis"""

#load csv file to create dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# print first five rows of dataframe
diabetes_dataset.head()

# number of rows and colums in the dataframe
diabetes_dataset.shape

# get standard measurements
diabetes_dataset.describe()

# Value counts
diabetes_dataset['Outcome'].value_counts()

"""This means 500 people from the list are non diabetic and 268 people are"""

diabetes_dataset.groupby('Outcome').mean()

# Separate Dataframes
A = diabetes_dataset.drop(columns='Outcome', axis=1)
B = diabetes_dataset['Outcome']

print(A)

print(B)

"""Data Standardation"""

#Initialize StandardScaler to fit and transform
scaler = StandardScaler()

scaler.fit(A)

# This helps keep our data between 0 and 1
standardized_data = scaler.transform(A)

#reassign standardized data to A, B remains the 'Outcome's dataframe
A = standardized_data

print(A)
print(B)

"""Train Test Splitting"""

a_train, a_test, b_train, b_test  = train_test_split(A, B, test_size=0.2, stratify=B, random_state=2)

print(A.shape, a_train.shape, a_test.shape)

"""Train the model"""

#Instantiate the classifier
classifier = svm.SVC(kernel='linear')

#Training the support vector machine classifier
classifier.fit(a_train, b_train)

"""Model Evaluation: Testing the accuracy of the model"""

# accuracy score on the training data
a_train_prediction = classifier.predict(a_train)
training_data_accurracy = accuracy_score(a_train_prediction, b_train)

print('Accuracy score of training data: ', training_data_accurracy)

# accuracy score of the test data
a_test_prediction = classifier.predict(a_test)
testing_data_accuracy = accuracy_score(a_test_prediction, b_test)

print('Accuracy score of testing data: ', testing_data_accuracy)

"""Making a predictive system
This is the normal code that uses the model
"""

input = (2,101,58,35,90,21.8,0.155,22)

# changing input tuple to a numpy array
input_np = np.asarray(input)

# Reshape the array to get prediction for just one instance
input_np_reshaped = input_np.reshape(1, -1)

#Standardize the input data
std_data = scaler.transform(input_np_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print('is Diabetic?: ', prediction)

if(prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')